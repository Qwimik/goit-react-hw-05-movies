{"version":3,"file":"static/js/859.f661adb1.chunk.js","mappings":"sOAGaA,EAAaC,EAAAA,GAAAA,GAAH,uKAUVC,EAAQD,EAAAA,GAAAA,GAAH,iHAOLE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,sJASTI,EAAeJ,EAAAA,GAAAA,IAAH,6KASZK,EAAOL,EAAAA,GAAAA,EAAH,sF,SCzBF,SAASM,EAAT,GAAkC,IAAVC,EAAS,EAATA,MAC/BC,GAAWC,EAAAA,EAAAA,MACbC,EAAQ,EAEZ,OACE,SAAC,IAAD,WACE,SAACX,EAAD,UACGQ,EAAMI,KAAI,SAAAC,GAAS,IAAD,UACjB,OACE,SAACX,EAAD,WACE,SAACC,EAAD,CAAWW,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMR,GAApD,UACE,UAACJ,EAAD,YACE,0BACE,gBACEa,QAAQ,OACRC,IACEN,EAAKO,YAAL,6CAC0CP,EAAKO,aAD/C,+CAE6CT,GAAS,GAExDU,IAAG,oBAAER,EAAKS,aAAP,QAAgBT,EAAKU,YAArB,QAA6BV,EAAKW,eACrCC,MAAM,MACNC,OAAO,WAGX,SAACpB,EAAD,wCACGO,EAAKS,aADR,QACiBT,EAAKU,YADtB,QAC8BV,EAAKW,sBADnC,QACqD,gBAjB/CX,EAAKE,GAuBpB,OAIR,C,sJC5Cc,SAASY,IACtB,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,6GAEQC,EAAAA,KAFR,cAEJC,EAFI,OAGVJ,EAAkBI,EAAIC,SAHZ,mDAMVC,QAAQC,IAAR,MANU,yDAAH,qDASXL,GACD,GAAE,KAGD,+BACE,SAACzB,EAAA,EAAD,CAAcC,MAAOqB,KAG1B,C,mMCvBKS,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,+BAKV,IAAMC,EAAc,mCAAG,oGACVD,EAAAA,EAAAA,IAAA,qCAAwCD,IAD9B,cACtBJ,EADsB,yBAErBA,EAAIO,MAFiB,2CAAH,qDAKdC,EAAa,mCAAG,WAAM3B,GAAN,uFACTwB,EAAAA,EAAAA,IAAA,iBAAoBxB,EAApB,oBAAkCuB,IADzB,cACrBJ,EADqB,yBAEpBA,EAAIO,MAFgB,2CAAH,sDAKbE,EAAgB,mCAAG,WAAMrB,GAAN,uFACZiB,EAAAA,EAAAA,IAAA,gCACSD,EADT,kBAC0BhB,IAFd,cACxBY,EADwB,yBAIvBA,EAAIO,MAJmB,2CAAH,sDAOhBG,EAAS,mCAAG,WAAM7B,GAAN,uFACLwB,EAAAA,EAAAA,IAAA,iBACNxB,EADM,4BACgBuB,EADhB,oBADK,cACjBJ,EADiB,yBAIhBA,EAAIO,MAJY,2CAAH,sDAOTI,EAAY,mCAAG,WAAM9B,GAAN,uFACRwB,EAAAA,EAAAA,IAAA,iBACNxB,EADM,4BACgBuB,EADhB,2BADQ,cACpBJ,EADoB,yBAInBA,EAAIO,MAJe,2CAAH,qD","sources":["components/TrendingList/TrendingList.styled.jsx","components/TrendingList/TrendingList.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  gap: 20px;\n  list-style: none;\n  margin: 0;\n`;\n\nexport const Movie = styled.li`\n  display: flex;\n  flex-direction: column;\n  max-width: 200px;\n  text-align: center;\n`;\n\nexport const LinkMovie = styled(Link)`\n  text-decoration: none;\n  color: #242424;\n  transition: color 250ms ease-in-out;\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const MovieWrapper = styled.div`\n  border-radius: 10px;\n  overflow: hidden;\n  transition: box-shadow 250ms ease-in-out;\n  &:hover {\n    box-shadow: 0px 0px 15px orangered;\n  }\n`;\n\nexport const Text = styled.p`\n  padding: 10px;\n  margin: 0;\n  background-color: #f8f8f8;\n`;\n","import { useLocation } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { Container } from 'components/App/App.styled';\nimport {\n  MoviesList,\n  Movie,\n  LinkMovie,\n  MovieWrapper,\n  Text,\n} from './TrendingList.styled';\n\nexport default function TrendingList({ items }) {\n  const location = useLocation();\n  let count = 0;\n\n  return (\n    <Container>\n      <MoviesList>\n        {items.map(item => {\n          return (\n            <Movie key={item.id}>\n              <LinkMovie to={`/movies/${item.id}`} state={{ from: location }}>\n                <MovieWrapper>\n                  <div>\n                    <img\n                      loading=\"lazy\"\n                      src={\n                        item.poster_path\n                          ? `https://image.tmdb.org/t/p/original${item.poster_path}`\n                          : `https://picsum.photos/200/300?random=${(count += 1)}`\n                      }\n                      alt={item.title ?? item.name ?? item.original_title}\n                      width=\"200\"\n                      height=\"300\"\n                    />\n                  </div>\n                  <Text>\n                    {item.title ?? item.name ?? item.original_title ?? 'Title'}\n                  </Text>\n                </MovieWrapper>\n              </LinkMovie>\n            </Movie>\n          );\n        })}\n      </MoviesList>\n    </Container>\n  );\n}\n\nTrendingList.propTypes = {\n  items: PropTypes.array.isRequired,\n};\n","import { useEffect, useState } from 'react';\n\nimport TrendingList from 'components/TrendingList';\nimport * as API from 'services/api';\n\nexport default function Home() {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await API.searchTrending();\n        setTrendingMovies(res.results);\n        return;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetch();\n  }, []);\n\n  return (\n    <>\n      <TrendingList items={trendingMovies} />\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3217ae06898d6f0a1d4d89e84bb85582';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const searchTrending = async () => {\n  const res = await axios.get(`/trending/all/week?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const searchMovieId = async id => {\n  const res = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const searchMovieTitle = async title => {\n  const res = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${title}`\n  );\n  return res.data;\n};\n\nexport const castMovie = async id => {\n  const res = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const reviewsMovie = async id => {\n  const res = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return res.data;\n};\n"],"names":["MoviesList","styled","Movie","LinkMovie","Link","MovieWrapper","Text","TrendingList","items","location","useLocation","count","map","item","to","id","state","from","loading","src","poster_path","alt","title","name","original_title","width","height","Home","useState","trendingMovies","setTrendingMovies","useEffect","fetch","API","res","results","console","log","API_KEY","axios","searchTrending","data","searchMovieId","searchMovieTitle","castMovie","reviewsMovie"],"sourceRoot":""}